#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      def devProject = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
	     sh "${mvnCmd} clean install -DskipTests=true"
      }

      // TBD: The next two stages should run in parallel
      parallel firstBranch: {
      // Using Maven run the unit tests
        stage('Unit Tests') {
          echo "Running Unit Tests"

          // TBD: Execute Unit Tests
  	     sh "${mvnCmd} test"
        }
      }, secondBranch: {

      // Using Maven to call SonarQube for Code Analysis
        stage('Code Analysis') {
          echo "Running Code Analysis"

          // TBD: Execute Sonarqube Tests	      
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"

        }
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
	       sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image      
	      script {
            openshift.withCluster() {
                openshift.withProject("${GUID}-tasks-dev") {
                    openshift.selector("bc","tasks").startBuild("--from-file=./target/openshift-tasks.war","--wait=true")
                    openshift.tag("tasks:latest", "tasks:${devTag}")
                }
            }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding

	// // Set image
	// sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} -n ${GUID}-tasks-dev"

	// // Set version
	// sh "oc set env dc/tasks VERSION=\"${devTag} (tasks-dev)\" -n ${GUID}-tasks-dev"

	// // Update config map with potentially changed properties files
	// sh "oc delete configmap tasks-config -n $GUID-tasks-dev --ignore-not-found=true"
 //        sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-dev"
	// // Deploy
	// openshiftDeploy depCfg: 'tasks', namespace: '${GUID}-tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'

	// // Wait for the deployment to be completed
 //        openshiftVerifyDeployment depCfg: 'tasks', namespace: '${GUID}-tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
 //        openshiftVerifyService namespace: '${GUID}-tasks-dev', svcName: 'tasks', verbose: 'false'
        script {
            openshift.withCluster() {
                openshift.withProject("${devProject}") {
            // TBD: Deploy the image
            // 1. Update the image on the dev deployment config
                    // openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
                    def dc_tasks = openshift.selector("dc/tasks").object()                
                    dc_tasks.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${devTag}"
                    dc_tasks.spec.template.spec.containers[0].env[0].value='${devTag} (tasks-dev)'
                    openshift.apply(dc_tasks)
    
            // 2. Update the config maps with the potentially changed properties files
                    openshift.selector("configmap", "tasks-config").delete()
                    def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )
           // 3. Reeploy the dev deployment
                    openshift.selector("dc", "tasks").rollout().latest();
           // 4. Wait until the deployment is running
           //    The following code will accomplish that by
           //    comparing the requested replicas
           //    (rc.spec.replicas) with the running replicas
           //    (rc.status.readyReplicas)
           //
           
                    def dc = openshift.selector("dc", "tasks").object()
                    def dc_version = dc.status.latestVersion
                    def rc = openshift.selector("rc", "tasks-${dc_version}").object()
            
                    echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                    while (rc.spec.replicas != rc.status.readyReplicas) {
                     sleep 5
                     rc = openshift.selector("rc", "tasks-${dc_version}").object()
                    }
                }
            }
        }
	
        
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry
	// sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"	
        // TBD: Tag the built image with the production tag.
	// openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '${GUID}-tasks-dev', srcStream: 'tasks', srcTag: devTag, verbose: 'false'
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=openshift:\$(oc whoami -t) --dest-creds=admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"
        openshift.withCluster() {
          openshift.withProject("${prodProject}") {
              openshift.tag("${devProject}/tasks:${devTag}","${devProject}/tasks:${prodTag}")
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
	
	       // determine which application is active
       //  activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${GUID}-tasks-prod -o jsonpath='{ .spec.to.name }'").trim()
       //  if (activeApp == "tasks-green") {
       //    destApp = "tasks-blue"
       //  }
	
      	// // set Image
      	// sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${prodTag} -n ${GUID}-tasks-prod"

      	// // set VERSION
      	// sh "oc set env dc/${destApp} VERSION=\"${prodTag} (${destApp})\" -n ${GUID}-tasks-prod"

      	// // update config map
      	// sh "oc delete configmap ${destApp}-config -n ${GUID}-tasks-prod --ignore-not-found=true"
      	// sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-prod"

      	// // deploy into other application
      	// openshiftDeploy depCfg: destApp, namespace: '${GUID}-tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'

       // 	// wait
      	// openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
       //  openshiftVerifyService namespace: '${GUID}-tasks-prod', svcName: destApp, verbose: 'false'
        script {
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    // TBD: 1. Determine which application is active
                    activeApp = openshift.selector("route", "tasks").object().spec.to.name
                    if (activeApp == "tasks-green") {
                        destApp = "tasks-blue"
                    }
                    echo "Active Application:      " + activeApp
                    echo "Destination Application: " + destApp
                
                    // 2. Update the image for the other application
                    // Update the Image on the Production Deployment Config
                    def dc = openshift.selector("dc/${destApp}").object()
                    // 3. Deploy into the other application
                    dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
                    openshift.apply(dc)
                    // 4. Update Config maps for other application
                    openshift.selector("configmap", "${destApp}-config").delete()
                    def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

                    // Deploy the inactive application.
                    openshift.selector("dc", "${destApp}").rollout().latest();
                    //  5. Wait until application is running
                    // Wait for application to be deployed
                    def dc_prod = openshift.selector("dc", "${destApp}").object()
                    def dc_version = dc_prod.status.latestVersion
                    def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                    echo "Waiting for ${destApp} to be ready"
                    while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                        sleep 5
                        rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                    }
                }
            }
        }      
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
              // TBD: Execute switch
      	// sh "oc patch route tasks -n ${GUID}-tasks-prod -p '{\"spec\":{\"name\":\"' + destApp + '\"}}}'"
        script {
            // TBD: After approval execute the switch
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    def route = openshift.selector("route/tasks").object()
                    route.spec.to.name="${destApp}"
                    openshift.apply(route)
                }
            }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
